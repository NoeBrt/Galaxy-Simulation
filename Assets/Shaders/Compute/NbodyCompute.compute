// Each #kernel tells which function to compile; you can have many kernel

#pragma kernel UpdateStars

struct Star{
    float3 position;
    float3 velocity;
};

uint starCount;
float deltaTime;
float interactionRate;
float smoothingLenght;
float blackHoleMass;



RWStructuredBuffer<Star> star;

float norm_2(float3 vect){
    return dot(vect, vect);  // More efficient than manual calculation
}
float3 compute_interaction( float3 position_1,float3 position_2,float smoothingLenght){
    float3 vect= position_2-position_1;
    return 9.81*normalize(vect)/(norm_2(vect)+smoothingLenght);
}


[numthreads(128,1,1)]
void UpdateStars (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= starCount) return;
    float3 position = star[id.x].position;
    float3 velocity = star[id.x].velocity;
    float3 acceleration = float3(0,0,0);
    [loop]
    for (uint i =0;i<(uint)(interactionRate*starCount);i++){
        if (i==id.x) continue;

        acceleration+= compute_interaction(position,star[i].position,smoothingLenght)/interactionRate;
    }
    acceleration +=compute_interaction(position,float3(0,0,0),smoothingLenght)*blackHoleMass;
    GroupMemoryBarrierWithGroupSync();

    velocity += acceleration * deltaTime;
    position += velocity* deltaTime;
    star[id.x].position = position;
    star[id.x].velocity = velocity;
}





